// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String           @id @default(uuid())
  email               String           @unique
  name                String           @default("")
  hashedPassword      String           @default("")
  salt                String           @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  webAuthnChallenge   String?          @unique
  credentials         UserCredential[]
  courtLocationsAdded CourtLocation[]
  reservations        Reservation[]
  createdSchedules    Schedule[]
  confirmations       Confirmation[]
  invitations         Invitation[]
}

model UserCredential {
  id         String  @id
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

model CourtLocation {
  id           String        @id @default(uuid())
  name         String
  address      String?
  notes        String?
  addedBy      User?         @relation(fields: [addedById], references: [id])
  addedById    String?
  reservations Reservation[]
}

model Reservation {
  id              String        @id @default(uuid())
  beginTimestamp  DateTime
  endTimestamp    DateTime
  courtLocation   CourtLocation @relation(fields: [courtLocationId], references: [id])
  courtLocationId String
  byUser          User          @relation(fields: [byUserId], references: [id])
  byUserId        String
  schedules       Schedule[]
}

model Schedule {
  id              String         @id @default(uuid())
  beginTimestamp  DateTime
  reservation     Reservation?   @relation(fields: [reservationId], references: [id])
  reservationId   String?
  createdByUser   User           @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  confirmations   Confirmation[]
}

model Confirmation {
  id          String      @id @default(uuid())
  targetType  String      @default("verified")
  status      String?
  player      User?       @relation(fields: [playerId], references: [id])
  playerId    String?
  manualName  String?
  schedule    Schedule    @relation(fields: [scheduleId], references: [id])
  scheduleId  String
  createdTime DateTime    @default(now())
  invitation  Invitation?
}

model Invitation {
  id              String       @id @default(uuid())
  email           String       @default("")
  emailSuccess    Boolean      @default(false)
  confirmationId  String       @unique
  confirmation    Confirmation @relation(fields: [confirmationId], references: [id])
  hashedCode      String
  invitedByUser   User         @relation(fields: [invitedByUserId], references: [id])
  invitedByUserId String
  invitedTime     DateTime
}
